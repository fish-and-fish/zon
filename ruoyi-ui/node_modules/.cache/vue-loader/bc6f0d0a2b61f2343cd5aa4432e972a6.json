{"remainingRequest":"/Users/linglong/Documents/code/RuoYi-Vue/ruoyi-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/linglong/Documents/code/RuoYi-Vue/ruoyi-ui/src/components/Breadcrumb/index.vue?vue&type=style&index=0&id=b50ef614&lang=scss&scoped=true","dependencies":[{"path":"/Users/linglong/Documents/code/RuoYi-Vue/ruoyi-ui/src/components/Breadcrumb/index.vue","mtime":1754723515812},{"path":"/Users/linglong/Documents/code/RuoYi-Vue/ruoyi-ui/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/linglong/Documents/code/RuoYi-Vue/ruoyi-ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/linglong/Documents/code/RuoYi-Vue/ruoyi-ui/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/linglong/Documents/code/RuoYi-Vue/ruoyi-ui/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/linglong/Documents/code/RuoYi-Vue/ruoyi-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/linglong/Documents/code/RuoYi-Vue/ruoyi-ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouYXBwLWJyZWFkY3J1bWIuZWwtYnJlYWRjcnVtYiB7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogIGZvbnQtc2l6ZTogMTRweDsKICBsaW5lLWhlaWdodDogNTBweDsKICBtYXJnaW4tbGVmdDogOHB4OwogIC5uby1yZWRpcmVjdCB7CiAgICBjb2xvcjogIzk3YThiZTsKICAgIGN1cnNvcjogdGV4dDsKICB9Cn0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/Breadcrumb","sourcesContent":["<template>\n  <el-breadcrumb class=\"app-breadcrumb\" separator=\"/\">\n    <transition-group name=\"breadcrumb\">\n      <el-breadcrumb-item v-for=\"(item, index) in levelList\" :key=\"item.path\">\n        <span v-if=\"item.redirect === 'noRedirect' || index == levelList.length - 1\" class=\"no-redirect\">{{ item.meta.title }}</span>\n        <a v-else @click.prevent=\"handleLink(item)\">{{ item.meta.title }}</a>\n      </el-breadcrumb-item>\n    </transition-group>\n  </el-breadcrumb>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      levelList: null\n    }\n  },\n  watch: {\n    $route(route) {\n      // if you go to the redirect page, do not update the breadcrumbs\n      if (route.path.startsWith('/redirect/')) {\n        return\n      }\n      this.getBreadcrumb()\n    }\n  },\n  created() {\n    this.getBreadcrumb()\n  },\n  methods: {\n    getBreadcrumb() {\n      // only show routes with meta.title\n      let matched = []\n      const router = this.$route\n      const pathNum = this.findPathNum(router.path)\n      // multi-level menu\n      if (pathNum > 2) {\n        const reg = /\\/\\w+/gi\n        const pathList = router.path.match(reg).map((item, index) => {\n          if (index !== 0) item = item.slice(1)\n          return item\n        })\n        this.getMatched(pathList, this.$store.getters.defaultRoutes, matched)\n      } else {\n        matched = router.matched.filter(item => item.meta && item.meta.title)\n      }\n      // 判断是否为首页\n      if (!this.isDashboard(matched[0])) {\n        matched = [{ path: \"/index\", meta: { title: \"首页\" } }].concat(matched)\n      }\n      this.levelList = matched.filter(item => item.meta && item.meta.title && item.meta.breadcrumb !== false)\n    },\n    findPathNum(str, char = \"/\") {\n      let index = str.indexOf(char)\n      let num = 0\n      while (index !== -1) {\n        num++\n        index = str.indexOf(char, index + 1)\n      }\n      return num\n    },\n    getMatched(pathList, routeList, matched) {\n      let data = routeList.find(item => item.path == pathList[0] || (item.name += '').toLowerCase() == pathList[0])\n      if (data) {\n        matched.push(data)\n        if (data.children && pathList.length) {\n          pathList.shift()\n          this.getMatched(pathList, data.children, matched)\n        }\n      }\n    },\n    isDashboard(route) {\n      const name = route && route.name\n      if (!name) {\n        return false\n      }\n      return name.trim() === 'Index'\n    },\n    handleLink(item) {\n      const { redirect, path } = item\n      if (redirect) {\n        this.$router.push(redirect)\n        return\n      }\n      this.$router.push(path)\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.app-breadcrumb.el-breadcrumb {\n  display: inline-block;\n  font-size: 14px;\n  line-height: 50px;\n  margin-left: 8px;\n  .no-redirect {\n    color: #97a8be;\n    cursor: text;\n  }\n}\n</style>\n"]}]}